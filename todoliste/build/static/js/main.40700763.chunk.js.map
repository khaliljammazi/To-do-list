{"version":3,"sources":["components/Popup.js","components/Update.js","components/Tasks.js","components/Scroll.js","App.js","reportWebVitals.js","index.js"],"names":["Popup","modal","toggle","save","useState","taskName","setTaskName","description","setDescription","handleChange","e","target","name","value","Modal","isOpen","ModalHeader","ModalBody","className","type","onChange","rows","ModalFooter","Button","color","onClick","preventDefault","taskObj","Update","updateTask","obj","useEffect","Name","Description","tempObj","Tasks","index","deleteTask","setModal","colors","primaryColor","secondaryColor","motion","li","initial","x","transition","duration","animate","whileHover","scale","style","position","right","bottom","button","whileTap","cursor","Scroll","props","overflow","border","borderRadius","height","children","App","show","setShow","liste","setListe","nbrs","length","arr","localStorage","getItem","JSON","parse","updatehandler","tempList","setItem","stringify","window","location","reload","handledelete","templiste","splice","h2","y","class","div","map","push","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.40700763.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\nconst Popup = ({modal, toggle,save}) => {\r\n    const [taskName, setTaskName] = useState('');\r\n    const [description, setDescription] = useState('');\r\n\r\n    const handleChange = (e) => {\r\n        \r\n        const {name, value} = e.target\r\n\r\n        if(name === \"taskName\"){\r\n            setTaskName(value)\r\n        }else{\r\n            setDescription(value)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    const handleSave = (e) => {\r\n        e.preventDefault()\r\n        let taskObj = {}\r\n        taskObj[\"Name\"] = taskName\r\n        taskObj[\"Description\"] = description\r\n       save(taskObj)\r\n     \r\n    }\r\n\r\n    return (\r\n        <Modal isOpen={modal} toggle={toggle}>\r\n            <ModalHeader toggle={toggle}>Create Task</ModalHeader>\r\n            <ModalBody>\r\n            \r\n                    <div className = \"form-group\">\r\n                        <label>Task Name</label>\r\n                        <input type=\"text\" className = \"form-control\" value = {taskName} onChange = {handleChange} name = \"taskName\"/>\r\n                    </div>\r\n                    <div className = \"form-group\">\r\n                        <label>Description</label>\r\n                        <textarea rows = \"5\" className = \"form-control\" value = {description} onChange = {handleChange} name = \"description\"></textarea>\r\n                    </div>\r\n                \r\n            </ModalBody>\r\n            <ModalFooter>\r\n            <Button color=\"primary\" onClick={handleSave}>Create</Button>{' '}\r\n            <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n            </ModalFooter>\r\n      </Modal>\r\n    );\r\n};\r\n\r\nexport default Popup;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState , useEffect} from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\nconst Update = ({modal, toggle, updateTask, obj}) => {\r\n    const [taskName, setTaskName] = useState('');\r\n    const [description, setDescription] = useState('');\r\n\r\n    const handleChange = (e) => {\r\n        \r\n        const {name, value} = e.target\r\n\r\n        if(name === \"taskName\"){\r\n            setTaskName(value)\r\n        }else{\r\n            setDescription(value)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        setTaskName(obj.Name)\r\n        setDescription(obj.Description)\r\n    },[])\r\n\r\n    const handleUpdate = (e) => {\r\n        e.preventDefault();\r\n        let tempObj = {}\r\n        tempObj['Name'] = taskName\r\n        tempObj['Description'] = description\r\n        updateTask(tempObj)\r\n    }\r\n\r\n    return (\r\n        <Modal isOpen={modal} toggle={toggle}>\r\n            <ModalHeader toggle={toggle}>Update Task</ModalHeader>\r\n            <ModalBody>\r\n            \r\n                    <div className = \"form-group\">\r\n                        <label>Task Name</label>\r\n                        <input type=\"text\" className = \"form-control\" value = {taskName} onChange = {handleChange} name = \"taskName\"/>\r\n                    </div>\r\n                    <div className = \"form-group\">\r\n                        <label>Description</label>\r\n                        <textarea rows = \"5\" className = \"form-control\" value = {description} onChange = {handleChange} name = \"description\"></textarea>\r\n                    </div>\r\n                \r\n            </ModalBody>\r\n            <ModalFooter>\r\n            <Button color=\"primary\" onClick={handleUpdate}>Update</Button>{' '}\r\n            <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n            </ModalFooter>\r\n      </Modal>\r\n    );\r\n};\r\n\r\nexport default Update;","import React, { useState } from \"react\";\r\nimport { motion } from \"framer-motion\";\r\nimport Update from \"./Update\";\r\nconst Tasks = ({taskObj, index, deleteTask, updateTask }) => {\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const colors = [\r\n    {\r\n      primaryColor: \"#5D93E1\",\r\n      secondaryColor: \"#ECF3FC\",\r\n    },\r\n    {\r\n      primaryColor: \"#F9D288\",\r\n      secondaryColor: \"#FEFAF1\",\r\n    },\r\n    {\r\n      primaryColor: \"#5DC250\",\r\n      secondaryColor: \"#F2FAF1\",\r\n    },\r\n    {\r\n      primaryColor: \"#F48687\",\r\n      secondaryColor: \"#FDF1F1\",\r\n    },\r\n    {\r\n      primaryColor: \"#B964F7\",\r\n      secondaryColor: \"#F3F0FD\",\r\n    },\r\n  ];\r\n\r\n  const toggle = () => {\r\n    setModal(!modal);\r\n  };\r\n\r\n  const deletethandler = () => {\r\n    deleteTask(index);\r\n  };\r\n\r\n  const updatehandler = (obj) => {\r\n    updateTask(obj, index);\r\n  };\r\n\r\n  return (\r\n    <motion.li\r\n      initial={{ x: \"150vw\", transition: { type: \"spring\", duration: 2 } }}\r\n      animate={{ x: 0, transition: { type: \"spring\", duration: 2 } }}\r\n      whileHover={{\r\n        scale: 1.05,\r\n        transition: { type: \"spring\", duration: 0.1 },\r\n      }}\r\n   \r\n      className=\"card-wrapper\">\r\n      <div\r\n        className=\"card-top\"\r\n        style={{ \"background-color\": colors[index % 5].primaryColor }}\r\n      ></div>\r\n      <div className=\"task-holder\">\r\n        <span\r\n          className=\"card-header\"\r\n          style={{\r\n            \"background-color\": colors[index % 5].secondaryColor,\r\n            \"border-radius\": \"10px\",\r\n          }}\r\n        >\r\n          {taskObj.Name}\r\n        </span>\r\n        <p className=\"mt-3\">{taskObj.Description}</p>\r\n\r\n        <div style={{ position: \"absolute\", right: \"20px\", bottom: \"20px\" }}>\r\n          <Update\r\n            modal={modal}\r\n            toggle={toggle}\r\n            updateTask={updatehandler}\r\n            obj={taskObj}\r\n          />\r\n          <motion.button\r\n            whileHover={{ scale: 1.4 }}\r\n            whileTap={{ scale: 0.9 }}\r\n            className=\"far fa-edit mr-3\"\r\n            style={{ color: colors[index % 5].primaryColor, cursor: \"pointer\" }}\r\n            onClick={() => setModal(true)}\r\n          ></motion.button>\r\n          <motion.button\r\n            whileHover={{ scale: 1.4 }}\r\n            whileTap={{ scale: 0.9 }}\r\n            className=\"fas fa-trash-alt\"\r\n            style={{ color: colors[index % 5].primaryColor, cursor: \"pointer\" }}\r\n            onClick={deletethandler}\r\n          >\r\n            {\" \"}\r\n          </motion.button>\r\n        </div>\r\n      </div>\r\n    </motion.li>\r\n  );\r\n};\r\n\r\nexport default Tasks;\r\n","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n<div style={{ overflow: 'auto', border: '1px solid black',borderRadius:'7px', height: '900px'}}>\r\n{props.children}\r\n\r\n</div>\r\n\r\n    );\r\n};\r\n\r\n\r\nexport default Scroll ;","import { React, useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Popup from \"./components/Popup\";\nimport Tasks from \"./components/Tasks\";\nimport Scroll from \"./components/Scroll\";\nimport { motion } from \"framer-motion\";\nfunction App() {\n  const [show, setShow] = useState(false);\n  const [liste, setListe] = useState([]);\n\n  const nbrs = liste.length;\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  useEffect(() => {\n    let arr = localStorage.getItem(\"list of tasks\");\n    if (arr) {\n      let obj = JSON.parse(arr);\n      setListe(obj);\n    }\n  }, []);\n\n  const handleSave = (obj) => {\n    let templiste = liste;\n    templiste.push(obj);\n    localStorage.setItem(\"list of tasks\", JSON.stringify(templiste));\n    setListe(templiste);\n    setShow(false);\n  };\n\n  const updatehandler = (obj, index) => {\n    let tempList = liste;\n    tempList[index] = obj;\n    localStorage.setItem(\"list of tasks\", JSON.stringify(tempList));\n    setListe(tempList);\n    window.location.reload();\n  };\n\n  const handledelete = (index) => {\n    let templiste = liste;\n    templiste.splice(index, 1);\n    localStorage.setItem(\"list of tasks\", JSON.stringify(templiste));\n    setListe(templiste);\n    window.location.reload();\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"header text-center\">\n        <motion.h2\n          initial={{ y: -200 }}\n          animate={{ y: 0 }}\n          transition={{ type: \"spring\", duration: 0.5 }}\n          whileHover={{ scale: 1.1 }}\n        >\n          To Do List\n        </motion.h2>\n\n        <button\n          className=\"add-btn\"\n          type=\"button\"\n          class=\"btn btn-outline-primary mt-2\"\n          onClick={handleShow}\n        >\n          Add task\n        </button>\n        <div style={{ color: \"#e1ebfd\" }}>Number of tasks is {nbrs}</div>\n      </div>\n      <Scroll>\n        <motion.div\n          initial={{ y: 1000 }}\n          animate={{ y: 0 }}\n          transition={{ type: \"spring\", duration: 1 }}\n        >\n          <div className=\"liste-container\">\n            {liste &&\n              liste.map((obj, index) => (\n                <Tasks\n                  key={index}\n                  taskObj={obj}\n                  index={index}\n                  deleteTask={handledelete}\n                  updateTask={updatehandler}\n                />\n              ))}\n          </div>\n          <Popup modal={show} toggle={handleClose} save={handleSave} />\n        </motion.div>{\" \"}\n      </Scroll>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}